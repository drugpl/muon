#!/usr/bin/env ruby
$:.unshift File.expand_path(__FILE__ + '/../../lib')

require 'muon'
require 'gli'

include GLI::App

program_desc 'muon tracks your working time'
version Muon::VERSION

# GLI hack
# https://gist.github.com/paneq/4713739

desc 'Set up current directory as muon project'
command :init do |c|
  c.flag %w(p project), 
    desc: "Project name", 
    long_desc: "Name of the project that is going to be stored in every record"

  c.flag %w(e email), 
    desc: "Your email", 
    long_desc: "Your email that is going to be stored in every record. We will try to guess if not given"

  c.flag %w(b branch), 
    desc: "Muon internal branch name",
    long_desc: "This is the branch that muon is going to use to track record for this project. We will create one based on your email and project name if not given"

  c.flag %w(d directory),
    desc: "[UNFINISHED] Muon git dir",
    long_desc: "Muon git working directory"

  c.action do |global, options, arguments|
    require 'muon/init'
    init_arguments = Muon::Init::Arguments.new(
      Pathname.new(Dir.pwd),
      nil, # options[:init], # Feature unfinished
      options[:project],
      options[:email],
      options[:branch]
    )
    Muon::Init.new(init_arguments).call
  end
end


desc 'Start tracking time'
command :start do |c|
  c.action do |global, options, arguments|
    require 'muon/start'

    project_dir = Pathname.new(Dir.pwd).join(".muon") # Fix it later
    metadata = arguments.inject({}) do |hash, arg|
      key, value = arg.split(":", 2)
      raise 'Metadata must follow "key:value" convention' if key.nil? || value.nil? || key.empty? || value.empty?
      hash[key] = value
      hash
    end

    Muon::Start.new(project_dir, metadata).call
  end
end

desc 'Stop tracking time'
command :stop do |c|
  c.action do |global, options, arguments|
    
    require 'muon/commit'
    require 'muon/current'

    project_dir = Pathname.new(Dir.pwd).join(".muon") # Fix it later
    Muon::Current.new(project_dir).ephemeral do |metadata|
      start       = Time.parse( metadata.delete('start') )
      Muon::Commit.new(project_dir, metadata, Time.now, start).call
    end

  end
end

desc 'Display report'
command :report do |c|
  c.action do |global, options, arguments|
    require 'muon/report'
    require 'muon/report_table'
    require 'hirb'


    begin
    project_dir = Pathname.new(Dir.pwd).join(".muon") # Fix it later
    result = Muon::Report.new(project_dir, nil, nil, nil, []).call
    table  = Muon::ReportTable.new(result, []).table
    #result = Muon::Report.new(project_dir, Time.new(2013,6, 1), Time.new(2013,6,30), nil, [:ticket]).call
    #table  = Muon::ReportTable.new(result, [:ticket]).table
    puts Hirb::Helpers::AutoTable.render(table)
    rescue => x
      puts x.inspect
      puts *x.backtrace
    end
  end
end

desc 'Display tracking status'
command :status do |c|
  c.action do |global, options, arguments|
    require 'muon/current'
    require 'muon/commit'
    require 'muon/format'
    require 'muon/report'

    project_dir = Pathname.new(Dir.pwd).join(".muon") # Fix it later
    current     = Muon::Current.new(project_dir)
    # TODO: Check if initialized
    if current.tracking?
      metadata  = current.read
      start     = Time.parse( metadata.delete('start') )
      commit    = Muon::Commit.new(project_dir, metadata, Time.now, start)
      data      = commit.data
      duration  = data[:duration]
      puts "Tracking: #{Muon::Format.duration(duration)}."
    else
      puts "Tracking: Stopped"
    end

    from        = Date.today.to_time
    to          = (Date.today + 1).to_time
    result      = Muon::Report.new(project_dir, from, to, nil, []).call
    today_sum   = result.first.to_a.first[:sum] rescue 0

    puts "Today:    #{Muon::Format.duration today_sum}."
    if current.tracking?
      puts "Total:    #{Muon::Format.duration today_sum + duration}."
    end
  end
end

desc 'Run http server with fancy stats'
command :server do |c|
  c.action do |global, options, arguments|
    require 'muon/report'

    project_dir = Pathname.new(Dir.pwd).join(".muon") # Fix it later
    require 'muon/server'

  end
end

desc 'Sync time entries to redmine'
command :"2redmine" do |c|
  c.action do |global, options, arguments|
    require 'muon/report'
    require 'muon/commit'

    require 'net/http'
    require 'net/https'
    require 'uri'
    project_dir = Pathname.new(Dir.pwd).join(".muon") # Fix it later
    entries = Muon::Report.new(project_dir, nil, nil, nil, []).all_objects.sort_by{|e| e['start'] } # TODO: Extract
    config  = Muon::Commit.new(project_dir, nil, nil, nil).muon.config # TODO: Extract
    url = token = nil
    config.redmine_url ||= Proc.new do |entry|
      url ||= begin
        puts <<-NOTE
\n\n
Please set config.redmine_url in your .muon/config or answer the questions"
Exemplary setting:
config.redmine_url = Proc.new do |entry|
  # fdd741ff8ef1f81b348bf24f6be3cc90 is your Redmine API
  # access key from /my/account page on your Redmine
  "https://fdd741ff8ef1f81b348bf24f6be3cc90@redmine.example.org"
end
NOTE
        puts "\n\nWhat is your Redmine URL ? Example: https://redmine.example.org"
        gets.strip
      end

      token ||= begin
        puts "\n\nWhat is your Redmine API access key ? You can see it at: #{url}/my/account"
        gets.strip
      end

      u = URI(url)
      u.user = token
      u.to_s
    end

    entries.each do |entry|
      next if entry['redmine_synced'] == true
      print "Sync #{entry['path']} ..."
      entry_filename = entry['path']
      uri = URI( config.redmine_url.call(entry) )
      Net::HTTP.start(uri.host, uri.port) do |http|
        req = Net::HTTP::Post.new("/time_entries.json")
        req.basic_auth uri.user, uri.password
        req.add_field 'Content-Type', 'application/json'
        req.set_form_data({
          #TODO: Extract conversion into config method
          "time_entry[issue_id]" => issue = entry['ticket'],
          "time_entry[spent_on]" => entry['start'],
          "time_entry[hours]"    => entry['duration'] / 3600.0,
          "time_entry[activity_id]" => 8, #5
          "time_entry[comments]" => entry['comments'] || entry['description'],
        })
        result = http.request(req)
        if Net::HTTPCreated === result
          print "OK... "
          Dir.chdir(project_dir) do
            content = MultiJson.load(File.read(entry_filename))
            content['redmine_synced'] = true
            string  = MultiJson.dump(content, :pretty => true)
            File.open(entry_filename, "w") {|f| f.puts(string) }
            puts `git add #{entry_filename}`
            puts `git commit -m 'Synced #{issue} with #{uri.host}'`
            print "COMMITED"
          end
        else
          print "FAIL"
        end
        puts result.inspect
      end
      break
    end
  end
end

text = <<-LALA

desc 'Cancel current tracking entry'
command :abort do |c|
  c.action do |global, options, arguments|
    @app.abort_tracking
  end
end

desc 'Add complete tracking entry'
command :commit do |c|
  c.action do |global, options, arguments|
    @app.commit_entry(arguments[0], arguments[1])
  end
end

desc 'Display total time on given day'
command :total do |c|
  c.action do |global, options, arguments|
    @app.show_total(arguments[0])
  end
end

desc 'Display time entries'
command :log do |c|
  c.flag [:n, :"max-count"]
  c.action do |global, options, arguments|
    limit = options[:n] ? options[:n].to_i : nil
    @app.show_log(limit)
  end
end

desc 'Set or see goal for current month'
command :goal do |c|
  c.action do |global, options, arguments|
    if arguments.length == 0
      @app.show_goal
    elsif arguments.length > 0
      @app.set_goal(arguments[0])
    end
  end
end

desc 'Get or set config options'
command :config do |c|
  c.switch :global
  c.action do |global, options, arguments|
    if arguments.length == 1
      @app.read_config_option(arguments[0], options)
    elsif arguments.length > 1
      @app.set_config_option(arguments[0], arguments[1], options)
    end
  end
end

desc 'Register project in ~/.muonprojects'
command :register do |c|
  c.action do |global, options, arguments|
    @app.register_global_project
  end
end

@app = Muon::App.new(Dir.pwd)
LALA

#exit run(@app.dealiasify(ARGV))
exit run(ARGV)
